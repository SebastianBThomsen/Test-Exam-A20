@page "/ViewBooks"
@using Model
@using AuthorBlazor.Data
@inject IAuthorHandler _authorHandler
@inject IBookHandler _bookHandler
@inject NavigationManager _navigationManager
<h3>ViewBooks</h3>

@if (_authors == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!_authors.Any())
{
    <p>
        <em>No Adults exist. Please add some.</em>
    </p>
}
else
{
    <RadzenDataGrid Data="@_authors" TItem="Author" AllowFiltering="true" FilterMode="FilterMode.Simple"
                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    LogicalFilterOperator="LogicalFilterOperator.And"
                    AllowSorting="true" PageSize="15" AllowPaging="true" AllowColumnResize="true">
        <Columns>

            
            @*<RadzenDataGridColumn TItem="Author" Property="Title" Title="Adult ID"/>
            <RadzenDataGridColumn TItem="Author" Property="PublicationYear" Title="First Name"/>
            <RadzenDataGridColumn TItem="Author" Property="NumOfPages" Title="Last Name"/>*@
            <RadzenDataGridColumn TItem="Author" Property="FirstName" Title="First Name"/>
            <RadzenDataGridColumn TItem="Author" Property="LastName" Title="Last Name"/> 
        </Columns>
    </RadzenDataGrid>
}
@*
@if (_authors == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (!_authors.Any())
{
    <p>
        <em>No Authors exist. Please add some.</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Title</th>
            <th>Publisher Year</th>
            <th>Pages</th>
            <th>Author First Name</th>
            <th>Author Last Name</th>
            <th>Delete</th>
        </tr>
        </thead>
        <tbody>
        @foreach (Author author in _authors)
        {
            @foreach (Book book in author.Book)
            {
                <tr>
                    <td>@book.Title</td>
                    <td>@book.PublicationYear</td>
                    <td>@book.NumOfPages</td>
                    <td>@author.FirstName</td>
                    <td>@author.LastName</td>
                    <td>
                        <button @onclick="@(() => RemoveBook(book.ISBN))">
                            <i class="oi oi-trash" style="color: #ff0000"/>
                        </button>
                    </td>

                </tr>
            }
        }
        </tbody>
    </table>
} *@

@code {
    private IList<Author> _authors;

    protected async override Task OnInitializedAsync()
    {
        _authors = await _authorHandler.GetAuthors();
    }

    private async Task RemoveBook(int bookISBN)
    {
        await _bookHandler.DeleteBook(bookISBN);
    }

}